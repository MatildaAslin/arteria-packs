version: "2.0" # mistral version
name: arteria-packs.ngi_uu_workflow
description: The ngi workflow, from sequencer to remote system...

workflows:
    main:
        type: direct
        input:
            - host
            - runfolder
            - run_type
            - remote_host
            - trigger_ngi_pipeline
            - send_mail_to
            - bcl2fastq_service_port
            - bcl2fastq_version
            - barcode_mismatches
            - tiles
            - use_base_mask
            - bcl2fastq_additional_arguments
            - siswrap_service_port
        output:
            output_the_whole_workflow_context: <% $ %>
        task-defaults:
            on-error:
                - oh_shit_error

        tasks:
            get_runfolder_name:
                action: core.local
                input:
                    cmd: python -c 'import sys; sys.stdout.write("<% $.runfolder %>".split("/")[-1])'
                publish:
                    runfolder_name: "<% $.get_runfolder_name.stdout %>"
                on-success:
                    - get_demultiplex_config

            ### DEMULTIPLEX START ###
            get_demultiplex_config:
                action: arteria-packs.get_pack_config
                publish:
                    hermes_base_url: <% $.get_demultiplex_config.result.hermes_base_url %>
                    hermes_user: <% $.get_demultiplex_config.result.hermes_user %>
                    hermes_token: <% $.get_demultiplex_config.result.hermes_token %>
                on-success:
                    - get_flowcell_name

            get_flowcell_name:
                action: arteria-packs.get_flowcell_from_runfolder_name
                input:
                    runfolder_name: <% $.runfolder_name %>
                publish:
                    flowcell_name: <% $.get_flowcell_name.result %>
                on-success:
                    - download_samplesheet

            download_samplesheet:
                action: core.http
                input:
                    url: <% $.hermes_base_url %>/<% $.flowcell_name %>/samplesheetfile
                    headers: USER=<% $.hermes_user %>&X-XSRF-TOKEN=<% $.hermes_token %>
                publish:
                    samplesheet_string: <% $.download_samplesheet.body.samplesheet %>
                on-success:
                    - construct_bcl2fastq_body

            # Since we don't want to pass empty values into
            # bcl2fastq-ws, we remove any empty keys from
            # this body.
            construct_bcl2fastq_body:
                action: arteria-packs.parse_bcl2fastq_args
                input:
                    samplesheet: "<% $.samplesheet_string %>"
                    bcl2fastq_version: "<% $.bcl2fastq_version %>"
                    barcode_mismatches: "<% $.barcode_mismatches %>"
                    tiles: "<% $.tiles %>"
                    use_base_mask: "<% $.use_base_mask %>"
                    additional_arguments: "<% $.bcl2fastq_additional_arguments %>"
                publish:
                    bcl2fastq_body: <% $.construct_bcl2fastq_body.stdout %>
                on-success:
                    - run_bcl2fastq

            run_bcl2fastq:
                action: core.http
                input:
                    url: "http://<% $.host %>:<% $.bcl2fastq_service_port %>/api/1.0/start/<% $.runfolder_name %>"
                    method: "POST"
                    headers: "Content-Type=application/json"
                    body: <% $.bcl2fastq_body %>
                publish:
                    bcl2fastq_status_url: <% $.run_bcl2fastq.body.link %>
                on-success:
                    - poll_demultiplex_status

            poll_demultiplex_status:
                action: arteria-packs.poll_status
                input:
                    url: <% $.bcl2fastq_status_url %>
                on-success:
                    - run_sisyphus_quick_report

            ### DEMULTIPLEX END ###


            ### QUICK REPORT START ###
            run_sisyphus_quick_report:
                action: core.http
                input:
                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/report/run/<% $.runfolder_name %>"
                    method: "POST"
                    headers: "Content-Type=application/json"
                    body: '{"runfolder": "<% $.runfolder_name %>"}'
                publish:
                    report_status_url: "<% $.run_sisyphus_quick_report.body.link %>"
                on-success:
                    - poll_report_status

            poll_report_status:
                action: arteria-packs.poll_status
                input:
                    url: "<% $.report_status_url %>"
                on-success:
                    - run_sisyphus_qc
            ### QUICK REPORT END ###

            ### QUALITY CONTROL START ###
            run_sisyphus_qc:
                action: core.http
                input:
                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/qc/run/<% $.runfolder_name %>"
                    method: "POST"
                    headers: "Content-Type=application/json"
                    body: '{"runfolder": "<% $.runfolder_name %>"}'
                publish:
                    qc_status_url: "<% $.run_sisyphus_qc.body.link %>"
                on-success:
                    - poll_qc_status

            poll_qc_status:
                action: arteria-packs.poll_status
                input:
                    url: <% $.qc_status_url %>
                on-success:
                    - notify_finished
            ### QUALITY CONTROL END ###

            ### TRANSFER FILES TO UPPMAX START ###
            #TODO Create list of files to rsync
            create_md5sums_for_transferred_files:
                action: core.remote
                input:
                    cmd: >
                    rsync -vrktp --dry-run --chmod=Dg+sx,ug+w,o-rwx --prune-empty-dirs --include-from <% include_file %> <% runfolder %> /tmp |
                     grep "<% runfolder_name %>" | grep -v "\/$" | xargs -0 -d'\n' md5sum
                publish:
                    md5_sums: <% $.create_md5sums_for_transferred_files.stdout %>

            rsync_to_uppmax:
                action: arteria-packs.rsync
                input:
                    source: <% runfolder %>
                    dest_server: testuppmax
                    destination: /tmp/
                    include_file: /etc/arteria/misc/hiseq.rsync
                    hosts: <% host %>

            rsync_to_summary_host:
                action: arteria-packs.rsync
                input:
                    source: <% runfolder %>
                    dest_server: summary-host
                    destination: /tmp/
                    include_file: /etc/arteria/misc/summary.rsync
                    hosts: <% host %>
            ### TRANSFER FILES TO UPPMAX END ###


            ### NOTIFIER START ###
            notify_finished:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - Finished processing runfolder <% $.runfolder_name %>'"
                    body: "Finished processing on <% $.host %> for <% $.runfolder_name %>: <% $.demultiplex_message %> <% $.report_message %> <% $.qc_message %>"

            oh_shit_error:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - OH SHIT ERROR occurred for runfolder <% $.runfolder_name %>'"
                    body: "An oh shit error occurred while processing <% $.runfolder_name %> on host <% $.host %>. Please investigate!"
                on-complete:
                  - fail
                  ### NOTIFIER END ###
